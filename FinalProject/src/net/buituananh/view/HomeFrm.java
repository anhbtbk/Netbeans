/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package net.buituananh.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import net.buituananh.model.Course;
import net.buituananh.model.Registering;
import net.buituananh.model.Student;
import net.buituananh.model.Subject;
import net.buituananh.model.controller.DataController;
import net.buituananh.model.controller.DataControllerImp;

/**
 *
 * @author Tuan Anh
 */
public class HomeFrm extends javax.swing.JFrame implements ActionListener {

    private List<Subject> subjects;
    private List<Student> students;
    private List<Registering> registerings;
    private List<Course> courses;

    private DefaultTableModel tableModelSubject;
    private DefaultTableModel tableModelStudent;
    private DefaultTableModel tableModelRegistering;
    private DefaultTableModel tableModelCourse;

    private DataController dataController;
    private SimpleDateFormat simpleDateFormat;

    private int selectedIndex;

    /**
     * Creates new form HomeFrm
     */
    public HomeFrm() {
        initComponents();
        setLocationRelativeTo(null);
        addButtonGroup();
        addActionListener();
        subjects = new ArrayList<>();
        tableModelSubject = (DefaultTableModel) tblSubject.getModel();
        tableModelStudent = (DefaultTableModel) tblStudent.getModel();
        tableModelRegistering = (DefaultTableModel) tblRegistering.getModel();
        tableModelCourse = (DefaultTableModel) tblCourse.getModel();
        dataController = new DataControllerImp();
        simpleDateFormat = new SimpleDateFormat("dd/MM/yyyy HH:mm:ss");
        selectedIndex = -1;
        loadData();
        showData();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupSortSubject = new javax.swing.ButtonGroup();
        buttonGroupSearchSubject = new javax.swing.ButtonGroup();
        buttonGroupSearchStudent = new javax.swing.ButtonGroup();
        buttonGroupSortStudent = new javax.swing.ButtonGroup();
        buttonGroupSearchRegistering = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        rbSortSubjectNameASC = new javax.swing.JRadioButton();
        rbSortSubjectNameDESC = new javax.swing.JRadioButton();
        rbSortSubjectLessonASC = new javax.swing.JRadioButton();
        rbSortSubjectLessonDESC = new javax.swing.JRadioButton();
        jPanel8 = new javax.swing.JPanel();
        rbSearchSubjectByName = new javax.swing.JRadioButton();
        rbSearchSubjectByNumOfLesson = new javax.swing.JRadioButton();
        txtSearchSubjectByName = new javax.swing.JTextField();
        btnSearchSubject = new javax.swing.JButton();
        txtSearchSubjectLessonFrom = new javax.swing.JTextField();
        txtSearchSubjectLessonTo = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblSubject = new javax.swing.JTable();
        btnAddNewSubject = new javax.swing.JButton();
        btnRefreshSubject = new javax.swing.JButton();
        btnRemoveSubject = new javax.swing.JButton();
        btnEditSubject = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        rbSortStudentNameASC = new javax.swing.JRadioButton();
        rbSortStudentNameDESC = new javax.swing.JRadioButton();
        rbSortStudentIdASC = new javax.swing.JRadioButton();
        jPanel10 = new javax.swing.JPanel();
        rbSearchStudentByName = new javax.swing.JRadioButton();
        rbSearchStudentId = new javax.swing.JRadioButton();
        txtSearchStudentName = new javax.swing.JTextField();
        btnSearchStudent = new javax.swing.JButton();
        txtSearchSubjectStudentById = new javax.swing.JTextField();
        rbSearchStudentByMajor = new javax.swing.JRadioButton();
        comboMajor = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblStudent = new javax.swing.JTable();
        btnAddNewStudent = new javax.swing.JButton();
        btnRefreshStudent = new javax.swing.JButton();
        btnRemoveStudent = new javax.swing.JButton();
        btnEditStudent = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblRegistering = new javax.swing.JTable();
        jPanel12 = new javax.swing.JPanel();
        rbSearchReByStudentName = new javax.swing.JRadioButton();
        rbSearchReByRegisterTime = new javax.swing.JRadioButton();
        txtSearchReByStudentName = new javax.swing.JTextField();
        btnSearchRegistering = new javax.swing.JButton();
        txtSearchReByRegisterTimeFrom = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        comboSortRegistering = new javax.swing.JComboBox<>();
        jSeparator1 = new javax.swing.JSeparator();
        txtSearchReByRegisterTimeTo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        btnRefreshRegistering = new javax.swing.JButton();
        btnAddNewRegistering = new javax.swing.JButton();
        btnRemoveRegistering = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        btnCreateCourse = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        tblCourse = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUẢN LÝ ĐĂNG KÝ MÔN HỌC");
        setResizable(false);

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp danh sách môn học", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortSubjectNameASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortSubjectNameASC.setText("Theo tên a-z");
        rbSortSubjectNameASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortSubjectNameASCActionPerformed(evt);
            }
        });

        rbSortSubjectNameDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortSubjectNameDESC.setText("Theo tên z-a");
        rbSortSubjectNameDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortSubjectNameDESCActionPerformed(evt);
            }
        });

        rbSortSubjectLessonASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortSubjectLessonASC.setText("Theo số tiết tăng dần");

        rbSortSubjectLessonDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortSubjectLessonDESC.setText("Theo số tiết giảm dần");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(rbSortSubjectNameASC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rbSortSubjectNameDESC, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(42, 42, 42)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbSortSubjectLessonASC)
                    .addComponent(rbSortSubjectLessonDESC))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortSubjectNameASC)
                    .addComponent(rbSortSubjectLessonASC))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortSubjectNameDESC)
                    .addComponent(rbSortSubjectLessonDESC))
                .addGap(21, 21, 21))
        );

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm môn học", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchSubjectByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchSubjectByName.setText("Theo tên gần đúng");
        rbSearchSubjectByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchSubjectByNameActionPerformed(evt);
            }
        });

        rbSearchSubjectByNumOfLesson.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchSubjectByNumOfLesson.setText("Theo số tiết học");
        rbSearchSubjectByNumOfLesson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchSubjectByNumOfLessonActionPerformed(evt);
            }
        });

        txtSearchSubjectByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnSearchSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchSubject.setText("Tìm");

        txtSearchSubjectLessonFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchSubjectLessonFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchSubjectLessonFromActionPerformed(evt);
            }
        });

        txtSearchSubjectLessonTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Từ:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Đến:");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(rbSearchSubjectByNumOfLesson, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(16, 16, 16))
                    .addComponent(rbSearchSubjectByName, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchSubjectLessonFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearchSubjectLessonTo, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(txtSearchSubjectByName, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(41, 41, 41)
                .addComponent(btnSearchSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchSubjectByName)
                    .addComponent(txtSearchSubjectByName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addComponent(rbSearchSubjectByNumOfLesson)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearchSubjectLessonTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(txtSearchSubjectLessonFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(40, 40, 40))))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(btnSearchSubject)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tblSubject.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã môn học", "Tên môn học", "Tổng số tiết học", "Loại môn học"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblSubject);

        btnAddNewSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddNewSubject.setText("Thêm môn học");
        btnAddNewSubject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewSubjectActionPerformed(evt);
            }
        });

        btnRefreshSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshSubject.setText("Làm mới");

        btnRemoveSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveSubject.setText("Xóa môn học");

        btnEditSubject.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditSubject.setText("Sửa môn học");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(btnRefreshSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(btnAddNewSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(btnEditSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(100, 100, 100)
                        .addComponent(btnRemoveSubject, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(40, Short.MAX_VALUE))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, 131, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 316, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNewSubject)
                    .addComponent(btnRefreshSubject)
                    .addComponent(btnRemoveSubject)
                    .addComponent(btnEditSubject))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("QUẢN LÝ MÔN HỌC", jPanel3);

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Sắp xếp danh sách sinh viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSortStudentNameASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortStudentNameASC.setText("Theo tên a-z");
        rbSortStudentNameASC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortStudentNameASCActionPerformed(evt);
            }
        });

        rbSortStudentNameDESC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortStudentNameDESC.setText("Theo tên z-a");
        rbSortStudentNameDESC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSortStudentNameDESCActionPerformed(evt);
            }
        });

        rbSortStudentIdASC.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSortStudentIdASC.setText("Theo mã sinh viên a-z");

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(rbSortStudentNameDESC)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(rbSortStudentNameASC)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 58, Short.MAX_VALUE)
                        .addComponent(rbSortStudentIdASC)
                        .addGap(28, 28, 28))))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSortStudentNameASC)
                    .addComponent(rbSortStudentIdASC))
                .addGap(18, 18, 18)
                .addComponent(rbSortStudentNameDESC)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm sinh viên", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchStudentByName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchStudentByName.setText("Theo tên gần đúng");
        rbSearchStudentByName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchStudentByNameActionPerformed(evt);
            }
        });

        rbSearchStudentId.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchStudentId.setText("Theo mã sinh viên");
        rbSearchStudentId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchStudentIdActionPerformed(evt);
            }
        });

        txtSearchStudentName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnSearchStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchStudent.setText("Tìm");

        txtSearchSubjectStudentById.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchSubjectStudentById.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchSubjectStudentByIdActionPerformed(evt);
            }
        });

        rbSearchStudentByMajor.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchStudentByMajor.setText("Theo chuyên ngành");

        comboMajor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Công nghệ thông tin", "Điện tử", "Viễn thông", "Quản trị kinh doanh", "Khoa học dữ liệu" }));
        comboMajor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboMajorActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbSearchStudentByName)
                            .addComponent(rbSearchStudentId))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtSearchStudentName, javax.swing.GroupLayout.DEFAULT_SIZE, 232, Short.MAX_VALUE)
                            .addComponent(txtSearchSubjectStudentById)))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addComponent(rbSearchStudentByMajor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(comboMajor, 0, 232, Short.MAX_VALUE)))
                .addGap(18, 18, 18)
                .addComponent(btnSearchStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchStudentByName)
                    .addComponent(txtSearchStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearchSubjectStudentById, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rbSearchStudentId)
                    .addComponent(btnSearchStudent))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchStudentByMajor)
                    .addComponent(comboMajor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(14, Short.MAX_VALUE))
        );

        tblStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Họ tên", "Ngày sinh", "Địa chỉ", "Email", "Số điện thoại", "Lớp", "Chuyên ngành", "Niên khóa"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblStudent);
        if (tblStudent.getColumnModel().getColumnCount() > 0) {
            tblStudent.getColumnModel().getColumn(2).setResizable(false);
        }

        btnAddNewStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddNewStudent.setText("Thêm sinh viên");
        btnAddNewStudent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewStudentActionPerformed(evt);
            }
        });

        btnRefreshStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshStudent.setText("Làm mới");

        btnRemoveStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveStudent.setText("Xóa sinh viên");

        btnEditStudent.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnEditStudent.setText("Sửa sinh viên");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(59, 59, 59)
                .addComponent(btnRefreshStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(btnAddNewStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(btnEditStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(59, 59, 59)
                .addComponent(btnRemoveStudent, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(81, 81, 81))
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(38, 38, 38)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAddNewStudent)
                    .addComponent(btnRefreshStudent)
                    .addComponent(btnRemoveStudent)
                    .addComponent(btnEditStudent))
                .addContainerGap(41, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1050, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 581, Short.MAX_VALUE)
            .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel4Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("QUẢN LÝ SINH VIÊN", jPanel4);

        tblRegistering.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sinh viên", "Họ tên sinh viên", "Lớp", "Mã môn", "Tên môn", "Thời gian đăng ký"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblRegistering);

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tìm kiếm và sắp xếp bảng đăng kí", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 14))); // NOI18N

        rbSearchReByStudentName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchReByStudentName.setText("Tìm kiếm theo tên sinh viên");
        rbSearchReByStudentName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchReByStudentNameActionPerformed(evt);
            }
        });

        rbSearchReByRegisterTime.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        rbSearchReByRegisterTime.setText("Tìm kiếm theo thời gian đăng ký");
        rbSearchReByRegisterTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbSearchReByRegisterTimeActionPerformed(evt);
            }
        });

        txtSearchReByStudentName.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        btnSearchRegistering.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSearchRegistering.setText("Tìm");

        txtSearchReByRegisterTimeFrom.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchReByRegisterTimeFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchReByRegisterTimeFromActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Sắp xếp theo:");

        comboSortRegistering.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        comboSortRegistering.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tên tăng dần từ a-z", "Tên giảm dần từ z-a", "Thời gian đăng ký sớm-muộn", "Thời gian đăng ký muộn-sớm" }));

        txtSearchReByRegisterTimeTo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        txtSearchReByRegisterTimeTo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchReByRegisterTimeToActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Nhập tên sinh viên:");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Từ ngày:");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Đến ngày:");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(comboSortRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 239, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel12Layout.createSequentialGroup()
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(rbSearchReByStudentName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rbSearchReByRegisterTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(67, 67, 67)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel12Layout.createSequentialGroup()
                                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(66, 66, 66)
                                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(txtSearchReByRegisterTimeFrom, javax.swing.GroupLayout.DEFAULT_SIZE, 314, Short.MAX_VALUE)
                                            .addComponent(txtSearchReByRegisterTimeTo)))
                                    .addGroup(jPanel12Layout.createSequentialGroup()
                                        .addComponent(jLabel4)
                                        .addGap(18, 18, 18)
                                        .addComponent(txtSearchReByStudentName)))
                                .addGap(49, 49, 49)
                                .addComponent(btnSearchRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(32, 32, 32)))
                        .addGap(24, 24, 24))))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(comboSortRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbSearchReByStudentName)
                    .addComponent(jLabel4)
                    .addComponent(txtSearchReByStudentName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(17, 17, 17)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(rbSearchReByRegisterTime)
                        .addComponent(jLabel5))
                    .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnSearchRegistering)
                        .addComponent(txtSearchReByRegisterTimeFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtSearchReByRegisterTimeTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnRefreshRegistering.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRefreshRegistering.setText("Làm mới");

        btnAddNewRegistering.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnAddNewRegistering.setText("Thêm đăng kí");
        btnAddNewRegistering.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddNewRegisteringActionPerformed(evt);
            }
        });

        btnRemoveRegistering.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnRemoveRegistering.setText("Xóa đăng kí");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addComponent(btnRefreshRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150)
                .addComponent(btnAddNewRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150)
                .addComponent(btnRemoveRegistering, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(150, 150, 150))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(249, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 246, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(35, 35, 35)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRemoveRegistering)
                    .addComponent(btnAddNewRegistering)
                    .addComponent(btnRefreshRegistering))
                .addGap(26, 26, 26))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGap(26, 26, 26)
                    .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(338, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("QUẢN LÝ ĐĂNG KÝ", jPanel1);

        btnCreateCourse.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnCreateCourse.setText("Tạo lớp học phần");

        tblCourse.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tên lớp học phần", "Mã sinh viên", "Họ tên sinh viên", "Lớp", "Mã môn", "Tên môn", "Thời gian đăng ký"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(tblCourse);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 1010, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnCreateCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(btnCreateCourse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(24, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("PHÂN LỚP HỌC", jPanel2);

        jMenu1.setText("File");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.ALT_DOWN_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/turn-off-24px.png"))); // NOI18N
        jMenuItem1.setText("Thoát");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        dispose();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void btnAddNewRegisteringActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewRegisteringActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddNewRegisteringActionPerformed

    private void txtSearchReByRegisterTimeToActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchReByRegisterTimeToActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchReByRegisterTimeToActionPerformed

    private void txtSearchReByRegisterTimeFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchReByRegisterTimeFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchReByRegisterTimeFromActionPerformed

    private void rbSearchReByRegisterTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchReByRegisterTimeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchReByRegisterTimeActionPerformed

    private void rbSearchReByStudentNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchReByStudentNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchReByStudentNameActionPerformed

    private void btnAddNewStudentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewStudentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddNewStudentActionPerformed

    private void comboMajorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboMajorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboMajorActionPerformed

    private void txtSearchSubjectStudentByIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchSubjectStudentByIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchSubjectStudentByIdActionPerformed

    private void rbSearchStudentIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchStudentIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchStudentIdActionPerformed

    private void rbSearchStudentByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchStudentByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchStudentByNameActionPerformed

    private void rbSortStudentNameDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortStudentNameDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortStudentNameDESCActionPerformed

    private void rbSortStudentNameASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortStudentNameASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortStudentNameASCActionPerformed

    private void btnAddNewSubjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddNewSubjectActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnAddNewSubjectActionPerformed

    private void txtSearchSubjectLessonFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchSubjectLessonFromActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchSubjectLessonFromActionPerformed

    private void rbSearchSubjectByNumOfLessonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchSubjectByNumOfLessonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchSubjectByNumOfLessonActionPerformed

    private void rbSearchSubjectByNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSearchSubjectByNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSearchSubjectByNameActionPerformed

    private void rbSortSubjectNameDESCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortSubjectNameDESCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortSubjectNameDESCActionPerformed

    private void rbSortSubjectNameASCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbSortSubjectNameASCActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbSortSubjectNameASCActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(HomeFrm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new HomeFrm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddNewRegistering;
    private javax.swing.JButton btnAddNewStudent;
    private javax.swing.JButton btnAddNewSubject;
    private javax.swing.JButton btnCreateCourse;
    private javax.swing.JButton btnEditStudent;
    private javax.swing.JButton btnEditSubject;
    private javax.swing.JButton btnRefreshRegistering;
    private javax.swing.JButton btnRefreshStudent;
    private javax.swing.JButton btnRefreshSubject;
    private javax.swing.JButton btnRemoveRegistering;
    private javax.swing.JButton btnRemoveStudent;
    private javax.swing.JButton btnRemoveSubject;
    private javax.swing.JButton btnSearchRegistering;
    private javax.swing.JButton btnSearchStudent;
    private javax.swing.JButton btnSearchSubject;
    private javax.swing.ButtonGroup buttonGroupSearchRegistering;
    private javax.swing.ButtonGroup buttonGroupSearchStudent;
    private javax.swing.ButtonGroup buttonGroupSearchSubject;
    private javax.swing.ButtonGroup buttonGroupSortStudent;
    private javax.swing.ButtonGroup buttonGroupSortSubject;
    private javax.swing.JComboBox<String> comboMajor;
    private javax.swing.JComboBox<String> comboSortRegistering;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton rbSearchReByRegisterTime;
    private javax.swing.JRadioButton rbSearchReByStudentName;
    private javax.swing.JRadioButton rbSearchStudentByMajor;
    private javax.swing.JRadioButton rbSearchStudentByName;
    private javax.swing.JRadioButton rbSearchStudentId;
    private javax.swing.JRadioButton rbSearchSubjectByName;
    private javax.swing.JRadioButton rbSearchSubjectByNumOfLesson;
    private javax.swing.JRadioButton rbSortStudentIdASC;
    private javax.swing.JRadioButton rbSortStudentNameASC;
    private javax.swing.JRadioButton rbSortStudentNameDESC;
    private javax.swing.JRadioButton rbSortSubjectLessonASC;
    private javax.swing.JRadioButton rbSortSubjectLessonDESC;
    private javax.swing.JRadioButton rbSortSubjectNameASC;
    private javax.swing.JRadioButton rbSortSubjectNameDESC;
    private javax.swing.JTable tblCourse;
    private javax.swing.JTable tblRegistering;
    private javax.swing.JTable tblStudent;
    private javax.swing.JTable tblSubject;
    private javax.swing.JTextField txtSearchReByRegisterTimeFrom;
    private javax.swing.JTextField txtSearchReByRegisterTimeTo;
    private javax.swing.JTextField txtSearchReByStudentName;
    private javax.swing.JTextField txtSearchStudentName;
    private javax.swing.JTextField txtSearchSubjectByName;
    private javax.swing.JTextField txtSearchSubjectLessonFrom;
    private javax.swing.JTextField txtSearchSubjectLessonTo;
    private javax.swing.JTextField txtSearchSubjectStudentById;
    // End of variables declaration//GEN-END:variables

    private void addButtonGroup() {
        buttonGroupSearchSubject.add(rbSearchSubjectByName);
        buttonGroupSearchSubject.add(rbSearchSubjectByNumOfLesson);

        buttonGroupSortSubject.add(rbSortSubjectLessonASC);
        buttonGroupSortSubject.add(rbSortSubjectLessonDESC);
        buttonGroupSortSubject.add(rbSortSubjectNameASC);
        buttonGroupSortSubject.add(rbSortSubjectNameDESC);

        buttonGroupSearchStudent.add(rbSearchStudentId);
        buttonGroupSearchStudent.add(rbSearchStudentByMajor);
        buttonGroupSearchStudent.add(rbSearchStudentByName);

        buttonGroupSortStudent.add(rbSortStudentNameASC);
        buttonGroupSortStudent.add(rbSortStudentNameDESC);
        buttonGroupSortStudent.add(rbSortStudentIdASC);

        buttonGroupSearchRegistering.add(rbSearchReByStudentName);
        buttonGroupSearchRegistering.add(rbSearchReByRegisterTime);

    }

    private void addActionListener() {
        btnAddNewSubject.addActionListener(this);
        btnEditSubject.addActionListener(this);
        btnRefreshSubject.addActionListener(this);
        btnRemoveSubject.addActionListener(this);
        btnSearchSubject.addActionListener(this);

        btnAddNewStudent.addActionListener(this);
        btnEditStudent.addActionListener(this);
        btnRefreshStudent.addActionListener(this);
        btnRemoveStudent.addActionListener(this);

        rbSearchSubjectByName.addActionListener(this);
        rbSearchSubjectByNumOfLesson.addActionListener(this);
        rbSortSubjectLessonASC.addActionListener(this);
        rbSortSubjectLessonDESC.addActionListener(this);
        rbSortSubjectNameASC.addActionListener(this);
        rbSortSubjectNameDESC.addActionListener(this);

        rbSortStudentNameASC.addActionListener(this);
        rbSortStudentNameDESC.addActionListener(this);
        rbSortStudentIdASC.addActionListener(this);

        rbSearchStudentByName.addActionListener(this);
        rbSearchStudentId.addActionListener(this);
        rbSearchStudentByMajor.addActionListener(this);
        btnSearchStudent.addActionListener(this);

        btnAddNewRegistering.addActionListener(this);
        btnRefreshRegistering.addActionListener(this);
        btnRemoveRegistering.addActionListener(this);
        comboSortRegistering.addActionListener(this);
        btnSearchRegistering.addActionListener(this);
        rbSearchReByStudentName.addActionListener(this);
        rbSearchReByRegisterTime.addActionListener(this);

        btnCreateCourse.addActionListener(this);
    }

    public void addSubjectCallback(Subject subject) {
        subjects.add(subject);
        showSubject(subject);
        saveData(DataController.SUBJECT);
    }

    public void addRegisteringCallback(Registering registering) {
        registerings.add(registering);
        showRegistering(registering);
        saveData(DataController.REGISTERING);
    }

    public void addStudentCallback(Student student) {
        students.add(student);
        showStudent(student);
        saveData(DataController.STUDENT);
    }

        public void createCourseCallback(Course course) {
        courses.add(course);
        showCourse();
        saveData(DataController.COURSE);
    }
    public void editStudentCallback(Student student) {
        tableModelStudent.removeRow(selectedIndex);
        var format = "dd/MM/yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(format);
        Object[] row = new Object[]{
            student.getStudentId(), student.getFullName(),
            dateFormat.format(student.getDob()), student.getAddress(),
            student.getEmail(), student.getPhoneNumber(),
            student.getStudentClass(), student.getMajor(), student.getSchoolYear()
        };
        tableModelStudent.insertRow(selectedIndex, row);
        students.set(selectedIndex, student);
        saveData(DataController.STUDENT);
        selectedIndex = -1;
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        // thực hiện các hành động
        var obj = e.getSource();
        if (obj.equals(btnAddNewSubject)) {
            AddSubjectDialog addSubjectDialog
                    = new AddSubjectDialog(this, rootPaneCheckingEnabled);
            addSubjectDialog.setVisible(true);
        } else if (obj.equals(btnRefreshSubject)) {
            refreshSubjects();
        } else if (obj.equals(btnRemoveSubject)) {
            removeSubject();
        } else if (obj.equals(btnEditSubject)) {
            editSubject();
        } else if (obj.equals(rbSortSubjectLessonASC)
                || obj.equals(rbSortSubjectLessonDESC)
                || obj.equals(rbSortSubjectNameASC)
                || obj.equals(rbSortSubjectNameDESC)) {
            sortSubjects(obj);
        } else if (obj.equals(btnSearchSubject)) {
            searchSubjects();
        } else if (obj.equals(btnAddNewStudent)) {
            addNewStudent();
        } else if (obj.equals(btnEditStudent)) {
            editStudent();
        } else if (btnRemoveStudent.equals(obj)) {
            removeStudent();
        } else if (obj.equals(btnRefreshStudent)) {
            refreshStudents();
        } else if (obj.equals(rbSortStudentIdASC)
                || obj.equals(rbSortStudentNameASC)
                || obj.equals(rbSortStudentNameDESC)) {
            sortStudents();
        } else if (obj.equals(rbSearchStudentId)
                || obj.equals(rbSearchStudentByName)
                || obj.equals(rbSearchStudentByMajor)) {
            checkSearchField();
        } else if (obj.equals(btnSearchStudent)) {
            searchStudents();
        } else if (obj.equals(btnAddNewRegistering)) {
            addNewRegistering();
        } else if (obj.equals(btnRemoveRegistering)) {
            removeRegistering();
        } else if (obj.equals(comboSortRegistering)) {
            sortRegistering();
        } else if (obj.equals(btnSearchRegistering)) {
            seachRegistering();
        } else if (obj.equals(rbSearchReByStudentName)
                || obj.equals(rbSearchReByRegisterTime)) {
            switchInputState();
        } else if (obj.equals(btnRefreshRegistering)) {
            refreshRegistering();
        } else if (obj.equals(btnCreateCourse)) {
            createCourse();
        }
    }

    private void showSubject(Subject subject) {
        Object[] row = new Object[]{
            subject.getId(), subject.getName(),
            subject.getNumOfLession(), subject.getKind()
        };
        tableModelSubject.addRow(row);
    }

    private void loadData() {
        // đọc danh sách môn học
        subjects = dataController
                .<Subject>readDataFromFile(DataController.SUBJECT_FILE);
        // đọc danh sách sinh viên
        students = dataController
                .<Student>readDataFromFile(DataController.STUDENT_FILE);
        // đọc danh sách bảng đăng ký
        registerings = dataController.
                <Registering>readDataFromFile(DataController.REGISTERING_FILE);
        editSubjectId();
        courses = dataController
                .<Course>readDataFromFile(DataController.COURSE_FILE);
    }

    private void showData() {
        showSubjects();
        showStudents();
        showRegisterings();
        showCourse();
    }

    private void showSubjects() {
        tableModelSubject.setRowCount(0); //clear data
        for (Subject subject : subjects) {
            showSubject(subject);
        }
    }

    private void saveData(int choice) {
        switch (choice) {
            case DataController.SUBJECT:
                dataController.<Subject>writeToFile(subjects,
                        DataController.SUBJECT_FILE);
                break;
            case DataController.STUDENT:
                dataController.<Student>writeToFile(students,
                        DataController.STUDENT_FILE);
                break;
            case DataController.REGISTERING:
                dataController.<Registering>writeToFile(registerings,
                        DataController.REGISTERING_FILE);
                break;
            case DataController.COURSE:
                dataController.<Course>writeToFile(courses,
                        DataController.COURSE_FILE);
                break;
        }
    }

    private void editSubjectId() {
        int maxId = Subject.getsId();
        for (Subject subject : subjects) {
            if (subject.getId() > maxId) {
                maxId = subject.getId();
            }

        }
        Subject.setsId(maxId + 1);

    }

    private void removeSubject() {
        int selectedIdex = tblSubject.getSelectedRow();
        if (selectedIdex > -1) {
            var msg = "Bạn có muốn chắc chắn muốn xóa bản ghi này không?";
            int confirm = JOptionPane.showConfirmDialog(rootPane, msg);
            if (confirm == JOptionPane.OK_OPTION) {
                subjects.remove(selectedIdex);
                tableModelSubject.removeRow(selectedIdex);
                dataController.<Subject>writeToFile(subjects,
                        DataController.SUBJECT_FILE);
                JOptionPane.showMessageDialog(rootPane,
                        "Xóa môn học thành công!");
            }
        } else {
            var msg = "Vui lòng chọn một bản ghi để xóa!";
            showDialogMessage(msg);
        }
    }

    private void showDialogMessage(String msg) {
        JOptionPane.showMessageDialog(rootPane, msg);
    }

    private void editSubject() {
        int selectedIdex = tblSubject.getSelectedRow();
        if (selectedIdex > -1) {
            Subject subject = subjects.get(selectedIdex);
            EditSubjectDialog editSubjectDialog
                    = new EditSubjectDialog(this,
                            rootPaneCheckingEnabled, subject);
            editSubjectDialog.setVisible(true);
        } else {
            var msg = "Vui lòng chọn một bản ghi để xóa!";
            showDialogMessage(msg);
        }

    }

    public void editSubjectCallback(Subject subject) {
        int selectedIdex = tblSubject.getSelectedRow();
        subjects.set(selectedIdex, subject);
        tableModelSubject.removeRow(selectedIdex);
        Object[] row = new Object[]{
            subject.getId(), subject.getName(),
            subject.getNumOfLession(), subject.getKind()
        };
        tableModelSubject.insertRow(selectedIdex, row);
        saveData(DataController.SUBJECT);
    }

    private void sortSubjects(Object obj) {
        if (obj.equals(rbSortSubjectLessonASC)) {
            dataController.sortSubjectByNunOfLessonASC(subjects);
        } else if (obj.equals(rbSortSubjectLessonDESC)) {
            dataController.sortSubjectByNunOfLessonDESC(subjects);
        } else if (obj.equals(rbSortSubjectNameASC)) {
            dataController.sortSubjectByNameASC(subjects);
        } else if (obj.equals(rbSortSubjectNameDESC)) {
            dataController.sortSubjectByNameDESC(subjects);
        }
        showSubjects();
    }

    private void searchSubjects() {
        if (rbSearchSubjectByName.isSelected()) {
            var key = txtSearchSubjectByName.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập tên môn học cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchSubjectByName(subjects, key);
                subjects.clear();
                subjects.addAll(result);
                checkAndShowSearchResult();
            }
        } else if (rbSearchSubjectByNumOfLesson.isSelected()) {
            var fromValString = txtSearchSubjectLessonFrom.getText();
            var toValSring = txtSearchSubjectLessonTo.getText();
            if (!fromValString.isEmpty() && !toValSring.isEmpty()) {
                var fromValue = Integer.parseInt(fromValString);
                var toValue = Integer.parseInt(toValSring);
                var result = dataController.searchSubjectByLessonRange(subjects,
                        fromValue, toValue);
                subjects.clear();
                subjects.addAll(result);
                checkAndShowSearchResult();
            } else {
                var msg = "Vui lòng nhập số tiết học cần tìm kiếm!";
                showDialogMessage(msg);
            }
        } else {
            var msg = "Vui lòng chọn tiêu chí tìm kiếm trước!";
            showDialogMessage(msg);
        }
    }

    private void checkAndShowSearchResult() {
        if (subjects.size() > 0) {
            showSubjects();
            var msg = "Tìm thấy " + subjects.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            subjects.clear();
            showSubjects();
            var msg = "Không tìm thấy kết quả nào!";
            showDialogMessage(msg);
        }
    }

    private void refreshSubjects() {
        var text = "";
        txtSearchSubjectByName.setText(text);
        txtSearchSubjectLessonFrom.setText(text);
        txtSearchSubjectLessonTo.setText(text);
        buttonGroupSortSubject.clearSelection();
        buttonGroupSearchSubject.clearSelection();
        subjects.clear();
        subjects.addAll(dataController.
                <Subject>readDataFromFile(DataController.SUBJECT_FILE));
        showSubjects();
    }

    private void addNewStudent() {
        AddStudentDialog addStudentDialog
                = new AddStudentDialog(this, rootPaneCheckingEnabled, students);
        addStudentDialog.setVisible(true);
    }

    private void showStudent(Student student) {
        var format = "dd/MM/yyyy";
        SimpleDateFormat dateFormat = new SimpleDateFormat(format);
        Object[] row = new Object[]{
            student.getStudentId(), student.getFullName(),
            dateFormat.format(student.getDob()), student.getAddress(),
            student.getEmail(), student.getPhoneNumber(),
            student.getStudentClass(), student.getMajor(),
            student.getSchoolYear()
        };
        tableModelStudent.addRow(row);
    }

    private void showStudents() {
        tableModelStudent.setRowCount(0); //clear data
        for (Student student : students) {
            showStudent(student);
        }
    }

    private void editStudent() {
        selectedIndex = tblStudent.getSelectedRow();
        if (selectedIndex > -1) {
            Student student = students.get(selectedIndex);
            var editStudentDialog = new EditStudentDialog(this, true, student);
            editStudentDialog.setVisible(true);
        } else {
            var msg = "Vui lòng chọn một sinh viên trong danh sách để sửa!";
            showDialogMessage(msg);
        }
    }

    private void removeStudent() {
        int removeIndex = tblStudent.getSelectedRow();
        if (removeIndex >= 0) {
            var msg = "Bạn có chắc chắn muốn xóa sinh viên này không?";
            int retValue = JOptionPane.showConfirmDialog(rootPane, msg);
            if (retValue == JOptionPane.YES_OPTION) {
                tableModelStudent.removeRow(removeIndex);
                students.remove(removeIndex);
                dataController.<Student>writeToFile(students,
                        DataController.STUDENT_FILE);
            }
        } else {
            var msg = "Vui lòng chọn một sinh viên để xóa!";
            showDialogMessage(msg);
        }
    }

    private void refreshStudents() {
        txtSearchSubjectStudentById.setEnabled(true);
        txtSearchStudentName.setEnabled(true);
        comboMajor.setEnabled(true);
        buttonGroupSortStudent.clearSelection();
        buttonGroupSearchStudent.clearSelection();
        txtSearchStudentName.setText("");
        txtSearchSubjectStudentById.setText("");
        comboMajor.setSelectedIndex(0);
        tableModelStudent.setRowCount(0);
        reloadStudent();
        showStudents();
    }

    private void reloadStudent() {
        students.clear();
        students.addAll(dataController.
                <Student>readDataFromFile(DataController.STUDENT_FILE));
    }

    private void sortStudents() {
        if (rbSortStudentIdASC.isSelected()) {
            dataController.sortStudentByStudentIdASC(students);
        } else if (rbSortStudentNameASC.isSelected()) {
            dataController.sortStudentByNameASC(students);
        } else if (rbSortStudentNameDESC.isSelected()) {
            dataController.sortStudentByNameDESC(students);
        }
        showStudents();
    }

    private void checkSearchField() {
        if (rbSearchStudentId.isSelected()) {
            txtSearchSubjectStudentById.setEnabled(true);
            txtSearchStudentName.setEnabled(false);
            comboMajor.setEnabled(false);
        } else if (rbSearchStudentByName.isSelected()) {
            txtSearchSubjectStudentById.setEnabled(false);
            txtSearchStudentName.setEnabled(true);
            comboMajor.setEnabled(false);
        } else if (rbSearchStudentByMajor.isSelected()) {
            txtSearchSubjectStudentById.setEnabled(false);
            txtSearchStudentName.setEnabled(false);
            comboMajor.setEnabled(true);
        }
    }

    private void searchStudents() {
        reloadStudent();
        if (rbSearchStudentId.isSelected()) {
            var key = txtSearchSubjectStudentById.getText();
            if (key.isEmpty()) {
                var msg = "Vui lòng nhập mã sinh viên cần tìm kiếm!";
                showDialogMessage(msg);
            } else {
                var result = dataController.searchStudentById(students, key);
                students.clear();
                students.addAll(result);
                checkAndShowSearchStudentResult();
            }
        } else if (rbSearchStudentByName.isSelected()) {
            var name = txtSearchStudentName.getText();
            if (!name.isEmpty()) {
                var result = dataController.searchStudentByName(students,
                        name);
                students.clear();
                students.addAll(result);
                checkAndShowSearchStudentResult();
            } else {
                var msg = "Vui lòng nhập tên sinh viên cần tìm kiếm!";
                showDialogMessage(msg);
            }
        } else if (rbSearchStudentByMajor.isSelected()) {
            var major = comboMajor.getSelectedItem().toString();
            if (!major.isEmpty()) {
                var result = dataController.searchStudentByMajor(students,
                        major);
                students.clear();
                students.addAll(result);
                checkAndShowSearchStudentResult();
            } else {
                var msg = "Vui lòng chọn chuyên ngành cần tìm kiếm!";
                showDialogMessage(msg);
            }

        } else {
            var msg = "Vui lòng chọn tiêu chí tìm kiếm trước!";
            showDialogMessage(msg);
        }

    }

    private void checkAndShowSearchStudentResult() {
        if (students.size() > 0) {
            showStudents();
            var msg = "Tìm thấy " + students.size() + " kết quả";
            showDialogMessage(msg);
        } else {
            students.clear();
            showStudents();
            var msg = "Không tìm thấy kết quả nào!";
            showDialogMessage(msg);
        }
    }

    private void addNewRegistering() {
        AddRegisterDialog registerDialog = new AddRegisterDialog(this, true,
                students, subjects, registerings);
        registerDialog.setVisible(true);
    }

    private void showRegistering(Registering r) {
        Object[] row = new Object[]{
            r.getStudent().getStudentId(), r.getStudent().getFullName(),
            r.getStudent().getMajor(), r.getSubject().getId(),
            r.getSubject().getName(), simpleDateFormat.format(r.getRegisterDate())
        };
        tableModelRegistering.addRow(row);
    }

    private void showRegisterings() {
        tableModelRegistering.setRowCount(0); //clear data
        for (Registering r : registerings) {
            showRegistering(r);
        }
    }

    private void removeRegistering() {
        var index = tblRegistering.getSelectedRow();
        if (index > -1) {
            int retVal = JOptionPane.showConfirmDialog(rootPane,
                    "Bạn có chắc muốn xóa bản ghi này không!");
            if (retVal == JOptionPane.YES_OPTION) {
                tableModelRegistering.removeRow(index);
                registerings.remove(index);
//                dataController.writeToFile(registerings, DataController.REGISTERING_FILE); // có thể dùng cách dưới
                saveData(DataController.REGISTERING); // Tái sử dụng phương thức saveData
                var msg = "Xóa bản ghi thành công!";
                showDialogMessage(msg);
            }
        } else {
            var msg = "Vui lòng chọn một bản đăng ký để xóa!";
            showDialogMessage(msg);
        }
    }

    private void sortRegistering() {
        int option = comboSortRegistering.getSelectedIndex();
        switch (option) {
            case 0:
                dataController.sortRegisteringByStudentNameAZ(registerings);
                break;
            case 1:
                dataController.sortRegisteringByStudentNameZA(registerings);
                break;
            case 2:
                dataController.sortRegisteringByRegisterTimeEL(registerings);
                break;
            case 3:
                dataController.sortRegisteringByRegisterTimeLE(registerings);
                break;
        }
        showRegisterings();
    }

    private void seachRegistering() {
        reloadRegisterings();
        List<Registering> copyList = new ArrayList<>(registerings);
        if (rbSearchReByRegisterTime.isSelected()) {
            var fromStr = txtSearchReByRegisterTimeFrom.getText().trim();
            var toStr = txtSearchReByRegisterTimeTo.getText().trim();
            if (fromStr.isEmpty() || toStr.isEmpty()) {
                var msg = "Vui lòng nhập đầy đủ ngày đăng ký cần tìm"
                        + "\nĐịnh dạng dd/MM/yyyy.";
                showDialogMessage(msg);
            } else {
                var format = "dd/MM/yyyy";
                var dateFormat = new SimpleDateFormat(format);
                try {
                    Date fromDate = dateFormat.parse(fromStr);
                    Date toDate = dateFormat.parse(toStr);
                    registerings.clear();
                    registerings.addAll(dataController.searchReByRegisterTime(
                            copyList, fromDate, toDate));
                    showRegisterings();
                    var msg = "Tìm thấy " + registerings.size() + " kết quả";
                    showDialogMessage(msg);
                } catch (ParseException ex) {
                    var msg = "Vui lòng nhập đúng định dạng dd/MM/yyyy.\n"
                            + "Ví dụ 25/11/2025";
                    showDialogMessage(msg);
                }
            }
        } else if (rbSearchReByStudentName.isSelected()) {
            var name = txtSearchReByStudentName.getText().trim();
            if (name.isEmpty()) {
                var msg = "Vui lòng nhập tên sinh viên để tìm kiếm.";
                showDialogMessage(msg);
            } else {
                registerings.clear();
                registerings.addAll(dataController.
                        searchReByStudentName(copyList, name));
                showRegisterings();
                var msg = "Tìm thấy " + registerings.size() + " kết quả";
                showDialogMessage(msg);
            }
        } else {
            var msg = "Vui lòng chọn phương thức tìm kiếm trước.";
            showDialogMessage(msg);
        }
    }

    private void reloadRegisterings() {
        registerings.clear();
        registerings.addAll(dataController.
                <Registering>readDataFromFile(DataController.REGISTERING_FILE));
    }

    private void switchInputState() {
        if (rbSearchReByStudentName.isSelected()) {
            txtSearchReByStudentName.setEnabled(true);
            txtSearchReByRegisterTimeFrom.setEnabled(false);
            txtSearchReByRegisterTimeTo.setEnabled(false);
        } else if (rbSearchReByRegisterTime.isSelected()) {
            txtSearchReByStudentName.setEnabled(false);
            txtSearchReByRegisterTimeFrom.setEnabled(true);
            txtSearchReByRegisterTimeTo.setEnabled(true);
        }
    }

    private void refreshRegistering() {
        var emptyText = "";
        txtSearchReByStudentName.setEnabled(true);
        txtSearchReByRegisterTimeFrom.setEnabled(true);
        txtSearchReByRegisterTimeTo.setEnabled(true);

        txtSearchReByStudentName.setText(emptyText);
        txtSearchReByRegisterTimeFrom.setText(emptyText);
        txtSearchReByRegisterTimeTo.setText(emptyText);

        comboSortRegistering.setSelectedIndex(0);
        buttonGroupSearchRegistering.clearSelection();

        reloadRegisterings();
    }

    private void createCourse() {
        dataController.sortRegisteringByRegisterTimeEL(registerings);
        courses = new ArrayList<>(dataController.createCourse(registerings, subjects));
        showCourse();
    }

    private void showCourse() {
        var emptyStr = "_";
        tableModelCourse.setRowCount(0);
        for (var course : courses) {
            for (var r : course.getRegisterings()) {
                Object[] row = new Object[]{
                    course.getName(), r.getStudent().getStudentId(),
                    r.getStudent().getFullName(),
                    r.getStudent().getMajor(), r.getSubject().getId(),
                    r.getSubject().getName(),
                    simpleDateFormat.format(r.getRegisterDate())
                };
                tableModelCourse.addRow(row);
            }
            var row = new Object[]{emptyStr, emptyStr, emptyStr,
                emptyStr, emptyStr, emptyStr, emptyStr};
            tableModelCourse.addRow(row);
        }
    }
}
